"--------------------------------------------------------------
" Maintainer: David Millman dave@cs.unc.edu
"--------------------------------------------------------------

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins managed by Vundle
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()

" let Vundle manage Vundle, required
Plugin 'gmarik/vundle'

" totally random and sos somewhat pointless
Plugin 'mhinz/vim-startify'

" colorschemes
Plugin 'joshdick/onedark.vim'
Plugin 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}

" navigation plugins
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'rbgrouleff/bclose.vim'
Plugin 'tpope/vim-surround'
Plugin 'rhysd/clever-f.vim'
Plugin 'tpope/vim-projectionist'

" other plugins
Plugin 'tpope/vim-dispatch'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'jamessan/vim-gnupg'
Plugin 'easymotion/vim-easymotion'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'bronson/vim-visual-star-search'
Plugin 'gcmt/taboo.vim'

" general programming plugins
Plugin 'janko-m/vim-test'
Plugin 'tomtom/tcomment_vim'

" git plugins
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'

" markdown plugins
Plugin 'tpope/vim-markdown'

" latex
" Plugin 'lervag/vimtex'

" cmake
Plugin 'vhdirk/vim-cmake'

" python plugins

" golang plugins
Plugin 'fatih/vim-go'

" " haskell plugins
" Plugin 'neovimhaskell/haskell-vim'

" " prolog plugins
" Plugin 'adimit/prolog.vim'

" " scala plugins
" Plugin 'derekwyatt/vim-scala'

" " ruby plugins
" Plugin 'vim-ruby/vim-ruby'
" Plugin 'tpope/vim-rails'
" Plugin 'ngmy/vim-rubocop'

" " javascript plugins
" Plugin 'jelera/vim-javascript-syntax'
" Plugin 'pangloss/vim-javascript'
" Plugin 'mxw/vim-jsx'

" " sql
" Plugin 'has2k1/sql.vim'
" Plugin 'shmup/vim-sql-syntax'

" " opengl
" Plugin 'tikhomirov/vim-glsl'

" R
Plugin 'jalvesaq/Nvim-R'

"-- plugin configuration
runtime! macros/matchit.vim

" startify
let g:startify_custom_header =
            \ map(split(system('fortune | cowsay'), '\n'),
            \ '"   ". v:val') + ['','']

" nerd tree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$', '__pycache__']

" fzf
nnoremap <C-p> :Files<cr>

" airline
let g:airline_powerline_fonts = 1
autocmd VimEnter * AirlineTheme bubblegum

" dispatch
let g:dispatch_compilers = {'zeus': ''}

" vim-test
let test#strategy = "neovim"
let g:rspec_format_file = "~/.vim/config/vim_formatter.rb"
let g:rspec_out_file = "/tmp/quickfix.out"
let test#ruby#rspec#options = "--require="
            \ . g:rspec_format_file . " --format VimFormatter --out "
            \ . g:rspec_out_file . " --format progress"
" let test#python#runner = 'pytest --capture=no'
let test#javascript#mocha#executable = "yarn test"

" vim-trailing-whitespace
autocmd BufWritePre * FixWhitespace

"-- some nice global variables
let g:default_text_width=80
let g:default_tabwidth=4

" Reload vimrm while updating
augroup reload_vimrc
  autocmd!
  autocmd bufwritepost ~/.vim/vimrc nested source ~/.vim/vimrc
augroup end

"-- 1 important
let mapleader = " "
set ttimeoutlen=0
set updatetime=100

"-- 2 moving around, searching and patterns
set ignorecase          " ignore case when searching
set smartcase           " override ignorecase when patter has upper case chars
set incsearch           " show matches as search is typed
set hlsearch            " highlight matches of last search pattern
set magic               " make backshash in regex more predictable

nnoremap <CR> :nohlsearch<cr>

"-- 3 tags
"-- 4 displaying text
set relativenumber      " display line numbers relative to cursor
set number              " display line numbers
set scrolloff=7         " number of padding lines when vertical scrolling
set cmdheight=1         " number of lines in the commandbar
set wrap                " wrap long lines
set linebreak           " wrap long lines at 'breakat' characters

"-- 5 syntax, highlighting and spelling
filetype plugin indent on " Enable filetype based plugins and indentation rules
syntax on               " Enable syntax highlighing
let &colorcolumn=default_text_width
" colorscheme onedark     " alt theme for when I want a change
colorscheme Tomorrow-Night
hi SpellBad cterm=underline ctermbg=237
hi TabLineSel ctermfg=Blue
setlocal spell          " enable spell checking by default

"-- 6 multiple windows
set hidden      " allow opening new buffers without writing the current buffer

"-- 7 multiple tab pages
"-- 8 terminal
set t_Co=256

"-- 9 using the mouse
set mouse=a		" enable mouse usage (all modes)

"-- 10 GUI
"-- 11 printing
"-- 12 messages and info
" set showcmd	        " show (partial) command in status line.

"-- 13 selecting text
set clipboard=unnamed  " Setting allows vim to interact with system clipboard

"-- 14 editing text
set backspace=eol,start,indent   " Set backspace functionality in insert mode
set showmatch                    " when inserting bracket, short jump to  match
set matchtime=2                  " tenth of a second to show match for 'showmatch'
let &textwidth=default_text_width " line length above with to wrap a line.

" "-- 15 tabs and indenting
set expandtab                       " In insert mode, expand <Tab> to spaces
let &shiftwidth=default_tabwidth    " number of spaces in each steop of (auto)indent
let &softtabstop=default_tabwidth   " number of spaces to remove when deleting insert mode
let &tabstop=default_tabwidth       " number of spaces a <Tab> in the text stands for
set smarttab                        " On an indent, <Tab> inserts 'shiftwidth' num spaces
set autoindent                      " automatically set indent of a new line
set smartindent                     " use smart indenting (good for c-like language)
set listchars=tab:▸\ ,eol:¬         " Use TextMate style tabstops and EOL symbols

"-- 16 folding
"-- 17 diff mode
"-- 18 mapping
"-- 19 reading and writing files
set fileformats=unix,dos,mac    " file formats to consider when editing a file
set autoread            " auto reread files changed externally
set autowrite           " auto save when leaving a modified buffer
set nobackup            " do not keep backup after overwriting a file
set nowritebackup       " do not write backup after overwriting a file

"-- 20 the swap file
set noswapfile          " do not keep a swap file

" "-- 21 command line editing
set undodir=~/.vim_runtime/undodir " directory for undo files
set undofile            " automatically save and restore undo history
set history=700         " number of lines of history that vim remembers
set wildmode=longest,list,full " complete like bash
set wildmenu            " command-line completion shows a list of matches

" " Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

"-- 22 executing external commands
set shell=/bin/bash

"-- 23 running make and jumping to errors (cope)
map <leader>mm :w \| make<cr>
map <leader>mj :w \| make -j<cr>
map <leader>cc :botright copen<cr>
map <leader>cn :cn<cr>
map <leader>cp :cp<cr>
map <leader>cg :execute "botright cope \| cgetfile "
      \. g:rspec_out_file . " \| cwindow"<cr>

"-- 24 language specific

" git
let g:git_text_width=72
autocmd FileType gitcommit let &textwidth=git_text_width
autocmd FileType gitcommit let &colorcolumn=git_text_width

" python
autocmd FileType python inoremap # X#
autocmd FileType python setlocal completeopt-=preview
autocmd FileType python iab xdbg import ipdb; ipdb.set_trace()
iab xpep8 Pep8ify

" ruby
let g:ruby_tabwidth=2
autocmd FileType ruby let &shiftwidth=ruby_tabwidth
autocmd FileType ruby let &softtabstop=ruby_tabwidth
autocmd FileType ruby let &tabstop=ruby_tabwidth
autocmd FileType ruby set norelativenumber
autocmd FileType ruby set number
autocmd FileType ruby set spell
autocmd FileType ruby set regexpengine=1
autocmd FileType ruby iab xdbg binding.pry
let ruby_spellcheck_strings = 1

" R-lang
let g:r_tabwidth=2
autocmd FileType r let &shiftwidth=r_tabwidth
autocmd FileType r let &softtabstop=r_tabwidth
autocmd FileType r let &tabstop=r_tabwidth
let r_indent_align_args = 0 " set vim-r-plugin to
let R_assign_map = "--" " convert -- to <-

" markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd FileType markdown set spell

" javascript
let g:javascript_tabwidth=2
autocmd FileType javascript let &shiftwidth=javascript_tabwidth
autocmd FileType javascript let &softtabstop=javascript_tabwidth
autocmd FileType javascript let &tabstop=javascript_tabwidth
iab xcl console.log

" golang
autocmd FileType make set noexpandtab
autocmd FileType go nmap <leader>b <Plug>(go-build)
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap ,t :GoRun<cr>
autocmd FileType go nmap ,q <C-h> :q <CR>
let g:go_fmt_command = "gofmt"
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_list_type = "quickfix"
let test#go#runner = 'gotest'

" makefiles
autocmd FileType make set noexpandtab

" html
let g:html_tabwidth=2
autocmd FileType html let &shiftwidth=html_tabwidth
autocmd FileType html let &softtabstop=html_tabwidth
autocmd FileType html let &tabstop=html_tabwidth
autocmd FileType html set spell

" latex
autocmd FileType tex set spell
autocmd FileType tex set linebreak
autocmd FileType tex set display+=lastline

" prolog
autocmd BufReadPost *.pro set filetype=prolog

"-- 25 multi-byte characters
set encoding=utf-8

"-- 26 various
" jump to the last position when reopening a file
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"-------------------------------------------------------------------------------
" Keybord Shortcuts
"-------------------------------------------------------------------------------
inoremap kj <esc>
nmap <leader>w :w!<cr>
nmap <leader>wq :wq!<cr>
nmap <leader>e :e! ~/.vim/vimrc<cr>

" execute the current file
autocmd FileType python noremap ,t :w\|!./%<cr>

command! -nargs=1 CMakeRun call s:cmakemaprun(<f-args>)
function! s:cmakemaprun(name)
    execute "noremap ,t :!(cd build; " . a:name . ")<cr>"
endfunction

map j gj
map k gk
nmap <leader><leader>w <Plug>(easymotion-bd-w)

" clean up the formatting of text
map qq gwap

" toggle spell checking
map <leader>ss :setlocal spell!<cr>

" Testing mappings
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>
nmap <silent> <leader>td :let test#strategy="dispatch"<CR>
nmap <silent> <leader>tb :let test#strategy="basic""<CR>
nmap <silent> <leader>tnv :let test#strategy="neovim""<CR>

" split and show alternate file
" nmap <silent> <leader>a :vs\|:A<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Moving around, tabs and buffers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" buffers
noremap <left> :bp<cr>
noremap <right> :bn<cr>
noremap <leader>ls :Buffers<cr>
" rbgrouleff/bclose.vim provides ':Bclose' and 'map <leader>bd :Bclose<cr>'

" Close all the buffers
map <leader>ba :1,300 bd!<cr>

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
" most status line is provided by powerline.
" All we have to do here is set some variables
" Always hide the statusline
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrevs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
iab xdate <c-r>=strftime("%Y-%m-%d")
iab xfn <c-r>=expand("%:t")
iab xtodo TODO:DLM:
iab xnote NOTE:DLM:

""""""""""""""""""""""""""""""
" => Vim grep
""""""""""""""""""""""""""""""
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn .git .hg'
set grepprg=/bin/grep\ -nH

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => netrw settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:netrw_liststyle = 3  " by default open in tree view (hit i to change the view)
let g:netrw_list_hide = '.DS_Store, .localized'  " hide these files
let g:netrw_preview = 1 " use 'p' to open file on the right
autocmd FileType netrw setl bufhidden=wipe

set previewheight=15
au BufEnter ?* call PreviewHeightWorkAround()
func! PreviewHeightWorkAround()
    if &previewwindow
        exec 'wincmd K'
        exec 'setlocal winheight='.&previewheight
    endif
endfunc

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Portable spelling
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
for d in glob('~/.vim/spell/*.add', 1, 1)
    if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
        exec 'mkspell! ' . fnameescape(d)
    endif
endfor
